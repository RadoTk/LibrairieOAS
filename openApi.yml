openapi: 3.1.0
info:
  version: "1.1.0"
  title: "Student Course Management API"
  description: "API for managing student courses, including groups and students. Updated to use Group schema instead of a string for group attribute in Student."
  

paths:
  /groups:
    get:
      tags:
      - name: Groups
      summary: "Retrieve a list of groups"
      description: "Fetch all groups or filter by group name and year."
      parameters:
        - name: groupName
          in: query
          description: "Filter groups by name"
          required: false
          schema:
            type: string
        - name: groupYear
          in: query
          description: "Filter groups by year (interval)"
          required: false
          schema:
            type: integer
      responses:
        200:
          description: "A list of groups"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
    post:
      tags:
        - name: Groups
      summary: "Create a new group"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        201:
          description: "Group created successfully"
    put:
      tags:
        - name: Groups
      summary: "Update an existing group"
      description: "This operation is idempotent."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        200:
          description: "Group updated successfully"

  /groups/{id}:
    delete:
      tags:
      - name: Groups
      summary: "Delete a group"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of the group to delete"
          schema:
            type: string
      responses:
        204:
          description: "Group deleted successfully"

  /students:
    get:
      tags:
        - name: Students
      summary: "Retrieve a list of students"
      description: "Fetch all students or filter by student name."
      parameters:
        - name: studentName
          in: query
          description: "Filter students by name"
          required: false
          schema:
            type: string
      responses:
        200:
          description: "A list of students"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Student"
    post:
      tags:
        - name: Students
      summary: "Add a new student"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
      responses:
        201:
          description: "Student created successfully"
    put:
      tags:
      - name: Students
      summary: "Update a student's information"
      description: "This operation is idempotent."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
      responses:
        200:
          description: "Student updated successfully"

  /students/{id}:
    delete:
      tags: 
      - name: Students
      summary: "Delete a student"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of the student to delete"
          schema:
            type: string
      responses:
        204:
          description: "Student deleted successfully"

components:
  schemas:
    Group:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier for the group"
        groupName:
          type: string
          description: "Name of the group"
        groupYear:
          type: integer
          description: "Year associated with the group"
        promotion:
          type: string
          enum: ["G", "H", "J", "K"]
          description: "Promotion of the group"
        studentNb:
          type: integer
          description: "Number of students in the group"
        students:
          type: array
          items:
            $ref: "#/components/schemas/Student"
          description: "List of students in the group"

    Student:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier for the student"
        name:
          type: string
          description: "Name of the student"
        sex:
          type: string
          enum: ["M", "F"]
          description: "Gender of the student"
        birthdate:
          type: string
          format: date
          description: "Birthdate of the student"
        reference:
          type: string
          description: "Unique reference for the student (e.g., STD23XXX)"
        group:
          allOf:
            - $ref: "#/components/schemas/Group"
          description: "Group to which the student belongs"
